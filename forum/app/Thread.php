<?php

namespace App;

use App\Events\ThreadHasNewReply;
use App\Events\ThreadReceivedNewReply;
use App\Notifications\ThreadWasUpdated;
use Illuminate\Database\Eloquent\Model;

class Thread extends Model
{
    use RecordsActivity;
    protected $guarded=[];

    protected $with=['creator', 'channel'];

    protected $appends=['isSubscribedTo'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($thread){
            $thread->replies->each->delete();
        });
    }


    public function path(){
        return "/thread/{$this->channel->slug}/{$this->id}";
    }

    public function replies(){
        return $this->hasMany(Reply::class);
    }

    public function channel()
    {
        return $this->belongsTo(Channel::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * @param $reply
     * @return Model
     */
    public function addReply($reply)
    {
        $reply =$this->replies()->create($reply);

        event(new ThreadReceivedNewReply($reply));

        event(new ThreadHasNewReply($this, $reply));

//        $this->subscriptions->
//        where('user_id', '!=', $reply->user_id )
//            ->each->notify($reply);

//        filter(function ($sub) use ($reply) {
//            return $sub->user_id != $reply->user_id;
//         })


        //prep notifications for all subscribers
//        foreach ($this->subscriptions as $subscription)
//        {
//            if($subscription->user_id != $reply->user_id){
//                $subscription->user->notify(new ThreadWasUpdated($this, $reply));
//            }
//
//        }
        return $reply;
    }

    /**
     * @param $query
     * @param $filters
     * @return mixed
     */
    public function scopeFilter($query, $filters)
    {
        return $filters->apply($query);
    }

    public function subscribe($user_id=null)
    {
        $this->subscriptions()->create([
            'user_id'=> $user_id ?: auth()->id()
        ]);

        return $this;
    }

    public function unsubscribe($user_id=null)
    {
        $this->subscriptions()->where('user_id', $user_id ?: auth()->id())->delete();
    }

    public function subscriptions()
    {
       return $this->hasMany(ThreadSubscription::class);
    }

    public function getIsSubscribedToAttribute()
    {
        return $this->subscriptions()
            ->where('user_id', auth()->id())
            ->exists();
    }

    public function hasUpdatesFor($user = null)
    {
        $user = $user ?: auth()->user();

        $key = $user->visitedThreadCacheKey($this);

        return $this->updated_at > cache($key) ;
    }
}
