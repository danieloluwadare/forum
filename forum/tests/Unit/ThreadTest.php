<?php

namespace Tests\Unit;

use Illuminate\Support\Facades\Auth;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;
    /**
     * A basic test example.
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory('App\Thread')->create();

    }

    function test_a_thread_has_replies()
    {
        //$thread = factory('App\Thread')->create();
        $this->assertInstanceOf('illuminate\Database\Eloquent\Collection', $this->thread->replies);
    }

    function test_a_thread_can_make_a_path()
    {
        $thread = create("App\Thread");
        $this->assertEquals("/thread/{$thread->channel->slug}/{$thread->id}",$thread->path());
    }

    function test_a_thread_has_a_creator()
    {
        //$thread = factory('App\Thread')->create();
        $this->assertInstanceOf('App\User', $this->thread->creator);
    }

    function test_a_thread_can_add_a_reply()
    {
        $this->thread->addReply([
            'body' => 'foobar',
            'user_id' => 1
        ]);

        $this->assertCount(1, $this->thread->replies);
    }

    function test_a_thread_can_belong_to_a_channel()
    {
        $thread = create('App\Thread');

        $this->assertInstanceOf('App\channel', $thread->channel);
    }

    /** @test */

    function a_user_can_subscribe_to_a_thread()
    {
        $thread = create('App\Thread');


        $thread->subscribe($user_id=1);

        $this->assertEquals(1, $thread->subscriptions()->where('user_id', $user_id)->count());
    }

    /** @test */

    function a_thread_can_be_unsubscribed_from()
    {
        $thread = create('App\Thread');


        $thread->subscribe($user_id=1);

        $thread->unsubscribe($user_id);

        $this->assertCount(0, $thread->subscriptions);
    }

    /** @test */

    function it_knows_if_the_authenticated_user_is_subscribed_to_it()
    {

        $thread = create('App\Thread');

        $this->signIn();

        $this->assertFalse($thread->isSubscribedTo);

        $thread->subscribe();

        $this->assertTrue($thread->isSubscribedTo);
    }

    /** @test */

    function a_thread_can_check_if_the_authenticated_user_has_read_all_reply()
    {
        $this->signIn();

        $thread = create("App\Thread");



        tap(auth()->user(),function($user) use($thread){

            $this->assertTrue($thread->hasUpdatesFor($user));

            $user->read($thread);

//            $key= sprintf("users.%s.visits.%s", $user->id, $thread->id);
//
//            cache()->forever($key, \Carbon\Carbon::now());

            $this->assertFalse($thread->hasUpdatesFor($user));

        });


    }
}
